<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<!-- Title and Meta -->
  <title>{% if title %}{{ title | titlecase }}{% else %}JD Ranpariya {% endif %}</title>
  <meta name="description" content="{% if description %}{{ description }}{% else %}Exploring the intersection of artificial intelligence, biology, neuroscience, and embodied cognition{% endif %}" />

  <!-- Favicon --->
  <link rel="apple-touch-icon" sizes="180x180" href="/assets/logo/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/logo/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/logo/favicon-16x16.png">
<link rel="manifest" href="/assets/logo/site.webmanifest">

  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&display=swap" rel="stylesheet">

  <!-- Tailwind CSS -->
  <link rel="stylesheet" href="/css/style.css" />

  <!-- Theme initialization to prevent flash -->
  <script>
  (function() {
  const savedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
  document.documentElement.classList.add('dark');
  }
  })();
  </script>
  </head>

  <body class="bg-bg dark:bg-bg-dark
  text-primary dark:text-primary-dark min-h-screen flex flex-col transition-colors duration-300"
      data-title="{{ title | safe }}"
      data-section="{{ section | default('general') }}"
      data-tags="{{ tags | default([]) | join(',') }}"
      data-series="{{ series | default('') }}">


  <!-- Alert -->
  {% include "components/alert.njk" %}

  <!-- Navigation -->
  {% include "components/nav.njk" %}

  <!-- Main Content -->
  <main class="flex-grow">
  {{ content | safe }}
  </main>

  <!-- Footer -->
  {% include "components/footer.njk" %}

  <!-- Scripts -->
  <script>
  // Toggle dark/light theme
  function toggleTheme() {
  const html = document.documentElement;
  const isDark = html.classList.contains('dark');
  html.classList.toggle('dark');
  localStorage.setItem('theme', isDark ? 'light' : 'dark');
  updateThemeButton(!isDark ? 'dark' : 'light');
  }

  function updateThemeButton(theme) {
  const button = document.getElementById('theme-toggle');
  if (!button) return;

  const icon = button.querySelector('svg');
  if (!icon) return;

  icon.innerHTML = theme === 'dark'
  ? `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>`
  : `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>`;

  button.setAttribute('title', theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode');
  }

  // Replace your existing toggleMobileMenu function with this:
  
function toggleMobileMenu() {
  const menu = document.getElementById('mobile-menu');
  const button = document.querySelector('[onclick="toggleMobileMenu()"]');
  const backdrop = document.getElementById('menu-backdrop');
  
  if (!menu || !button) return;

  const isOpen = !menu.classList.contains('translate-x-full');
  
  if (isOpen) {
    // Close menu
    menu.classList.add('translate-x-full');
    if (backdrop) backdrop.classList.add('opacity-0', 'pointer-events-none');
    document.body.classList.remove('overflow-hidden');
  } else {
    // Open menu
    menu.classList.remove('translate-x-full');
    if (backdrop) backdrop.classList.remove('opacity-0', 'pointer-events-none');
    document.body.classList.add('overflow-hidden'); // Prevent background scrolling
  }

  // Update hamburger icon
  const icon = button.querySelector('svg path');
  if (icon) {
    icon.setAttribute('d', isOpen 
      ? 'M4 6h16M4 12h16M4 18h16'  // Hamburger
      : 'M6 18L18 6M6 6l12 12');    // X
  }
}

function closeMobileMenu() {
  const menu = document.getElementById('mobile-menu');
  const backdrop = document.getElementById('menu-backdrop');
  const button = document.querySelector('[onclick="toggleMobileMenu()"]');
  
  if (menu) menu.classList.add('translate-x-full');
  if (backdrop) backdrop.classList.add('opacity-0', 'pointer-events-none');
  document.body.classList.remove('overflow-hidden');
  
  // Reset hamburger icon
  const icon = button?.querySelector('svg path');
  if (icon) icon.setAttribute('d', 'M4 6h16M4 12h16M4 18h16');
}

document.addEventListener('DOMContentLoaded', function() {
  // Initialize theme button
  const savedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  updateThemeButton(savedTheme || (prefersDark ? 'dark' : 'light'));

  // Close mobile menu when clicking backdrop
  document.addEventListener('click', function(event) {
    const backdrop = document.getElementById('menu-backdrop');
    if (event.target === backdrop) {
      closeMobileMenu();
    }
  });

  // Close menu on escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      const menu = document.getElementById('mobile-menu');
      if (menu && !menu.classList.contains('translate-x-full')) {
        closeMobileMenu();
      }
    }
  });
});

  </script>

  </body>
  </html>

  <script>
(async function() {
  // --- 0. Initialize session ---
  let session = JSON.parse(localStorage.getItem('userSession') || 'null');
  if (!session) {
    session = {
      sessionId: crypto.randomUUID(),
      startTime: new Date().toISOString(),
      events: [],
      geo: null,
      geoFetched: false
    };
    localStorage.setItem('userSession', JSON.stringify(session));
  }

  window._session = session;


  // --- 1. Page metadata ---
  const body = document.body;
  const pageEvent = {
    type: 'pageview',
    url: window.location.pathname,
    title: body.dataset.fulltitle || body.dataset.title || document.title,
    section: body.dataset.section || 'general',
    tags: body.dataset.tags ? body.dataset.tags.split(',') : [],
    series: body.dataset.series || '',
    sessionId: session.sessionId,
    timestamp: new Date().toISOString()
  };

  // --- 2. Visitor info ---
  const visitorData = {
    userAgent: navigator.userAgent,
    device: /Mobi|Android/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
    language: navigator.language,
    referrer: document.referrer
  };
  Object.assign(pageEvent, visitorData);
  if(session.geo) pageEvent.geo = session.geo;

  // --- 3. Engagement tracking ---
  let startTime = Date.now();
  let maxScroll = 0;
  window.addEventListener('scroll', () => {
    const scrolled = window.scrollY + window.innerHeight;
    const docHeight = document.documentElement.scrollHeight;
    const scrollPercent = Math.min(100, Math.round((scrolled / docHeight) * 100));
    if(scrollPercent > maxScroll) maxScroll = scrollPercent;
  });

  // --- 4. Click tracking ---
  document.addEventListener('click', e => {
    if(e.target.tagName === 'A') {
      const href = e.target.getAttribute('href');
      const text = e.target.innerText;
      session.events.push({
        type: 'click',
        target: text || href,
        href: href,
        timestamp: new Date().toISOString(),
        sessionId: session.sessionId
      });
    }
  });

  // --- 5. Add pageview to session ---
  session.events.push(pageEvent);
  localStorage.setItem('userSession', JSON.stringify(session));

  // --- 6. Function to send telemetry to Worker ---
  async function sendTelemetry(events) {
    if (!events.length) return;
    try {
      const payload = { events };
      const res = await fetch('https://telemetry-worker.ranpariya.workers.dev/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if(res.ok) {
        const result = await res.json();
        // Save geo info for future pageviews
        if(result.geo && !session.geoFetched) {
          session.geo = result.geo;
          session.geoFetched = true;
        }
        session.events = []; // clear sent events
        localStorage.setItem('userSession', JSON.stringify(session));
        console.log('Telemetry sent');
      }
    } catch(e) {
      console.error('Telemetry send failed', e);
    }
  }

  // --- 7. Periodic flush every 30s ---
  const flushInterval = setInterval(() => sendTelemetry(session.events), 6000);

  // --- 8. Flush on page unload ---
  window.addEventListener('beforeunload', () => {
    clearInterval(flushInterval);
    const timeSpent = Date.now() - startTime;
    const engagementEvent = {
      type: 'engagement',
      timeSpent,
      maxScroll,
      sessionId: session.sessionId,
      timestamp: new Date().toISOString()
    };
    session.events.push(engagementEvent);
    localStorage.setItem('userSession', JSON.stringify(session));
    const payload = JSON.stringify({ events: session.events });
    navigator.sendBeacon('https://telemetry-worker.ranpariya.workers.dev/', payload);
    session.events = []; // clear after sending
  });

})();
</script>

